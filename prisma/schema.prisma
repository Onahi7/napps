generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  fullName    String
  phone       String       @unique
  role        UserRole     @default(PARTICIPANT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  admin       Admin?
  participant Participant?
  validator   Validator?
}

model Participant {
  id                  String           @id @default(cuid())
  userId              String           @unique
  state               String
  lga                 String
  chapter             String?
  organization        String?
  position            String?
  paymentStatus       PaymentStatus    @default(PENDING)
  paymentProof        String?
  paymentAmount       Float?
  paymentDate         DateTime?
  accreditationStatus AccredStatus     @default(PENDING)
  accreditationDate   DateTime?
  qrCode              String?          @unique
  referenceCode       String?          @unique
  accommodation       Accommodation?
  user                User             @relation(fields: [userId], references: [id])
  resourceAccesses    ResourceAccess[]
  scans               Scan[]
}

model Validator {
  id          String       @id @default(cuid())
  userId      String       @unique
  assignments Assignment[]
  scans       Scan[]
  user        User         @relation(fields: [userId], references: [id])
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model ScheduleEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  day         Int
  startTime   String
  endTime     String
  venue       String?
  type        EventType
  speakers    String[]
}

model Resource {
  id          String           @id @default(cuid())
  title       String
  type        ResourceType
  url         String
  description String?
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  accesses    ResourceAccess[]
}

model ResourceAccess {
  id            String      @id @default(cuid())
  participantId String
  resourceId    String
  accessType    AccessType
  accessedAt    DateTime    @default(now())
  participant   Participant @relation(fields: [participantId], references: [id])
  resource      Resource    @relation(fields: [resourceId], references: [id])

  @@unique([participantId, resourceId, accessType])
}

model Hotel {
  id                String          @id @default(cuid())
  name              String
  description       String?
  address           String?
  pricePerNight     Float
  priceCategory     PriceCategory
  imageUrl          String?
  availableRooms    Int             @default(0)
  distanceFromVenue Float?
  rating            Float?
  amenities         String[]
  contactPhone      String?
  contactWhatsapp   String?
  isFeatured        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accommodations    Accommodation[]
}

model Accommodation {
  id               String        @id @default(cuid())
  participantId    String        @unique
  hotelId          String
  checkInDate      DateTime
  checkOutDate     DateTime
  bookingStatus    BookingStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  paymentReference String?       @unique
  totalAmount      Float
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  hotel            Hotel         @relation(fields: [hotelId], references: [id])
  participant      Participant   @relation(fields: [participantId], references: [id])
}

model Scan {
  id            String      @id @default(cuid())
  participantId String
  validatorId   String
  type          ScanType
  location      String?
  notes         String?
  scannedAt     DateTime    @default(now())
  participant   Participant @relation(fields: [participantId], references: [id])
  validator     Validator   @relation(fields: [validatorId], references: [id])
}

model Assignment {
  id          String           @id @default(cuid())
  validatorId String
  location    String
  date        DateTime
  startTime   String
  endTime     String
  type        ScanType
  status      AssignmentStatus @default(PENDING)
  validator   Validator        @relation(fields: [validatorId], references: [id])
}

model Config {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  PARTICIPANT
  VALIDATOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  PROOF_SUBMITTED
  COMPLETED
}

enum AccredStatus {
  PENDING
  COMPLETED
  DECLINED
}

enum EventType {
  SESSION
  BREAK
  REGISTRATION
  SPECIAL
}

enum ResourceType {
  DOCUMENT
  VIDEO
  PRESENTATION
  OTHER
}

enum AccessType {
  VIEW
  DOWNLOAD
}

enum PriceCategory {
  ECONOMY
  STANDARD
  PREMIUM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ScanType {
  CHECK_IN
  SESSION
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
